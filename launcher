#!/bin/bash

# Pull in any arguments and set defaults

## Where should we store your user data
# DATA_DIR=/opt/xibo
DATA_DIR=$(pwd)

## What version do you want to run
CMS_VERSION=latest
XMR_VERSION=latest

## What root password would you like to use for
## your MySQL server
## To generate a random password, use this default
MYSQL_ROOT_PASSWORD=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 16)
## Alternatively uncomment the following line to set your preferred choice
#MYSQL_ROOT_PASSWORD="root"

## Which port should XMR listen on for Players?
XMR_PLAYER_PORT=9505

## Which port should the Xibo CMS Webserver listen on?
WEBSERVER_PORT=8080

# Name prefix for the containers used in this
# application
INSTANCE_NAME="xibo"

############
#####
##### Library Functions
#####
############

function bootstrap {
  ### Bootstrap
  echo "Bootstrapping CMS Docker Containers"
  
  docker run --name $INSTANCE_NAME-cms-db -v $DATA_DIR/shared/db:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD -d mysql:5.6
  docker run --name $INSTANCE_NAME-cms-xmr -p $XMR_PLAYER_PORT:9505 -d xibosignage/xibo-xmr:$XMR_VERSION
  docker run --name $INSTANCE_NAME-cms-web -p $WEBSERVER_PORT:80 -e XMR_HOST=$INSTANCE_NAME-cms-xmr -d -v $DATA_DIR/shared/web:/var/www/xibo -v $DATA_DIR/shared/backup:/var/www/backup --link $INSTANCE_NAME-cms-db:mysql --link $INSTANCE_NAME-cms-xmr:50001 xibosignage/xibo-cms:$CMS_VERSION
  
  echo "CMS is running"
}

function bootstrap-dev {
  ### Bootstrap
  echo "Bootstrapping CMS Docker Containers in dev mode"
  
  docker run --name $INSTANCE_NAME-cms-db -v $DATA_DIR/shared/db:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD -d mysql:5.6
  docker run --name $INSTANCE_NAME-cms-xmr -p $XMR_PLAYER_PORT:9505 -d xibosignage/xibo-xmr:$XMR_VERSION
  docker run --name $INSTANCE_NAME-cms-web -p $WEBSERVER_PORT:80 -e XIBO_DEV_MODE=true -e XMR_HOST=$INSTANCE_NAME-cms-xmr -d -v $DATA_DIR/shared/web:/var/www/xibo -v $DATA_DIR/shared/backup:/var/www/backup --link $INSTANCE_NAME-cms-db:mysql --link $INSTANCE_NAME-cms-xmr:50001 xibosignage/xibo-cms:$CMS_VERSION
  
  echo "CMS is running"
}

function start {
  ### Start
  echo "Starting CMS"
  docker start $INSTANCE_NAME-cms-db
  docker start $INSTANCE_NAME-cms-xmr
  docker start $INSTANCE_NAME-cms-web
  echo "CMS is running"
  ### End Start
}

function stop {
  ### Stop
  echo "Stopping CMS"
  docker stop $INSTANCE_NAME-cms-web
  docker stop $INSTANCE_NAME-cms-xmr
  docker stop $INSTANCE_NAME-cms-db
  echo "CMS is stopped"
  ### End Stop
}

function destroy {
  ### Destroy
  echo "Destroying CMS Docker Containers (your data is safe!)"
  docker stop $INSTANCE_NAME-cms-web
  docker stop $INSTANCE_NAME-cms-xmr
  docker stop $INSTANCE_NAME-cms-db
  docker rm $INSTANCE_NAME-cms-web
  docker rm $INSTANCE_NAME-cms-xmr
  docker rm $INSTANCE_NAME-cms-db
  echo "CMS containers removed. You will need to bootstrap again in order to run the CMS."
  ### End Destroy
}

function force-destroy {
  ### Force Destroy
  echo "Force-Destroying CMS Docker Containers (your data is probably safe!)"
  docker kill $INSTANCE_NAME-cms-web
  docker kill $INSTANCE_NAME-cms-xmr
  docker kill $INSTANCE_NAME-cms-db
  docker rm $INSTANCE_NAME-cms-web
  docker rm $INSTANCE_NAME-cms-xmr
  docker rm $INSTANCE_NAME-cms-db
  echo "CMS containers removed. You will need to bootstrap again in order to run the CMS."
  ### End Destroy
}

function usage {
  echo "Usage: $0 COMMAND"
  echo ""
  echo "COMMAND:"
  echo "  bootstrap        Build a new environment from scratch"
  echo "  start            Start your existing environment"
  echo "  stop             Stop your existing environment"
  echo "  destroy          Destroy your existing environment."
  echo "                   User data persists."
  echo "  force-destroy    Kill and destroy your existing environment." 
  echo "  rebuild          Destroy then bootstrap persisting user data"
  echo "  upgrade          See rebuild"
  echo "  bootstrap-dev    Bootstrap environment but don't install the"
  echo "                   CMS"
  exit
}

if [ $# -lt 1 ]
then
  usage
fi

# Figure out what we're doing
case "$1" in
  start)
    start
  ;;
  stop)
    stop
  ;;
  bootstrap)
    bootstrap
  ;;
  bootstrap-dev)
    bootstrap-dev
  ;;
  destroy)
    destroy
  ;;
  force-destroy)
    force-destroy
  ;;
  rebuild)
    destroy
    bootstrap
  ;;
  upgrade)
    destroy
    bootstrap
  ;;
  *)
    echo "Invalid command"
    usage
esac

  