#!/bin/bash

# Pull in any arguments and set defaults
DATA_DIR=$(pwd)
MYSQL_ROOT_PASSWORD="root"

XMR_PLAYER_PORT=9505
WEBSERVER_PORT=8080

# Name prefix for the containers used in this
# application
INSTANCE_NAME="xibo"

# Figure out what we're doing
case "$1" in
  start)
    start
  ;;
  stop)
    stop
  ;;
  bootstrap)
    bootstrap
  ;;
  destroy)
    destroy
  ;;
esac

function bootstrap {
  ### Bootstrap
  # Bring up the docker instances
  #  -mysql
  #  -xibo-xmr:develop OR version tag
  #  -xibo-cms:develop OR version tag
  
  # In production we want to add restart policies
  echo "Bootstrapping CMS Docker Containers"
  
  docker run --name $INSTANCE_NAME-cms-db -v $DATA_DIR/shared/db:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD -d mysql:5.6
  docker run --name $INSTANCE_NAME-cms-xmr -p $XMR_PLAYER_PORT:9505 -d xibo-xmr:develop
  docker run --name $INSTANCE_NAME-cms-web -p $WEBSERVER_PORT:80 -d -v $DATA_DIR/shared/web:/var/www/xibo -v $(pwd)/shared/backup:/var/www/backup --link cms-db:mysql --link cms-xmr:50001 xibo-cms:develop
  
  echo "CMS is running"
}

function start {
  ### Start
  echo "Starting CMS"
  docker start $INSTANCE_NAME-cms-db
  docker start $INSTANCE_NAME-cms-xmr
  docker start $INSTANCE_NAME-cms-web
  echo "CMS is running"
  ### End Start
}

function stop {
  ### Stop
  echo "Stopping CMS"
  docker stop $INSTANE_NAME-cms-web
  docker stop $INSTANCE_NAME-cms-xmr
  docker stop $INSTANCE_NAME-cms-db
  echo "CMS is stopped"
  ### End Stop
}

function destroy {
  ### Destroy
  echo "Destroying CMS Docker Containers (your data is safe!)"
  docker kill $INSTANCE_NAME-cms-web
  docker kill $INSTANCE_NAME-cms-xmr
  docker kill $INSTANCE_NAME-cms-db
  docker rm $INSTANCE_NAME-cms-web
  docker rm $INSTANCE_NAME-cms-xmr
  docker rm $INSTANCE_NAME-cms-db
  echo "CMS containers removed. You will need to bootstrap again in order to run the CMS."
  ### End Destroy
}  